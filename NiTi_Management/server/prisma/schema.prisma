//        npx prisma migrate dev --name applink_database  ปรับโครงสร้างฐานข้อมูล 
//        npx prisma generate   เข้าถึงและจัดการข้อมูลในฐานข้อมูล
//        npx prisma migrate reset  ทำการลบและสร้างฐานข้อมูลใหม่

// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Village {
  id          Int       @id @default(autoincrement())
  email       String?   @unique
  password    String?
  village     String?
  phase       Int?      @unique
  district    String?
  subdistrict String?
  province    String?
  role        String    @default("admin")
  cameras     Camera[]
  vehicle     Vehicle[]
  members     Member[] // ความสัมพันธ์แบบ one-to-many กับ Member
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Camera {
  id             Int      @id @default(autoincrement())
  ip             String?  @unique
  cameraID       String?
  password       String?
  channel        String?
  subtype        String?
  way            String?
  cameraPosition String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  village        Village? @relation(fields: [villageId], references: [id], onDelete: Cascade)
  villageId      Int?
}

model Member {
  id          Int       @id @default(autoincrement())
  houseNumber String?   @unique
  status      String?
  vehicles    Vehicle[] // ความสัมพันธ์แบบ one-to-many กับ Vehicle
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  village     Village?  @relation(fields: [villageId], references: [id], onDelete: Cascade)
  villageId   Int?
}

model Vehicle {
  id           Int          @id @default(autoincrement())
  type         String?
  licensePlate String?      @unique
  province     String?
  details      String?
  imgVehicles  ImgVehicle[] // ความสัมพันธ์แบบ one-to-many กับ ImgVehicle
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  member       Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId     Int
  Village      Village?     @relation(fields: [villageId], references: [id], onDelete: Cascade)
  villageId    Int?
}

model ImgVehicle {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId Int
}
